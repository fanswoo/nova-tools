#!/usr/bin/env node

import '../core/bootstrap';
import chalk from 'chalk';
import clear from 'clear';
import figlet from 'figlet';
import colors from 'colors';
import { Command } from 'commander';
import PackageUtil from '@/utils/package-util';
import PackageUpdator from '@/package-updator/package-updator';
import { IPackageConfig } from '@/package-source/contracts/package';

class CommandLine {
  protected options: {
    platform: string;
    packageName: string;
    source: string;
    configPath: string;
  };

  protected commander: any;

  protected config!: IPackageConfig;

  constructor() {
    this.commander = new Command();
    this.commander
      .description('manage package')
      .requiredOption('-p, --platform <name>', 'update platform name')
      .option('-c, --config-path <config path>', 'input config path')
      .parse();

    this.options = this.commander.opts();
  }

  async run(): Promise<boolean> {
    await PackageUtil.validateEnvironment();

    this.config = await PackageUtil.getConfig({
      configPath: this.options.configPath,
    });

    this.updatePackage();
    return true;
  }

  updatePackage(): boolean {
    if (!['npm'].includes(this.options.platform)) {
      throw new Error('This command only supports npm.');
    }

    let packageUpdator = new PackageUpdator(this.config);
    const validate = packageUpdator.update();

    if (validate) {
      console.log(colors.green(`Already updated`));
      return true;
    }

    console.warn(colors.red(`update failed`));
    return false;
  }
}

const commandLine = new CommandLine();
commandLine.run();
