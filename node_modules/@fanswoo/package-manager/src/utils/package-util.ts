import fs from 'fs';
import ComposerUtil from '@/utils/composer-util';
import NpmUtil from '@/utils/npm-util';
import { IPackageConfig } from '@/package-source/contracts/package';

export default class PackageUtil {
  static async getPackageList(config: IPackageConfig) {
    const composerPackageList = await ComposerUtil.getPackageList(
      config,
    );
    const npmPackageList = await NpmUtil.getPackageList(config);

    return composerPackageList.concat(npmPackageList);
  }

  static async getConfig(arg: {
    configPath: string;
  }): Promise<IPackageConfig> {
    let configFile = '';

    if (arg?.configPath) {
      configFile = `${process.cwd()}/${arg.configPath}`;
    } else {
      configFile = `${process.cwd()}/package-manager.js`;
    }

    try {
      await fs.accessSync(configFile, fs.constants.F_OK);
    } catch (error) {
      throw new Error(`${configFile} not exists`);
    }

    // eslint-disable-next-line import/no-dynamic-require, global-require
    return require(configFile);
  }

  static async validateEnvironment() {
    const versionFull = await NpmUtil.getVersion();
    const versionMain = parseInt(versionFull.split('.')[0], 10);

    if (![7, 8].includes(versionMain)) {
      throw new Error('npm version must be 7 or 8');
    }

    try {
      await fs.accessSync(`${process.cwd()}/composer.json`);
    } catch (error) {
      throw new Error('composer.json is required');
    }

    try {
      await fs.accessSync(`${process.cwd()}/package.json`);
    } catch (error) {
      throw new Error('package.json is required');
    }
  }
}
