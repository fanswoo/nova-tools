#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
require("../core/bootstrap");
const colors_1 = (0, tslib_1.__importDefault)(require("colors"));
const commander_1 = require("commander");
const package_util_1 = (0, tslib_1.__importDefault)(require("@/utils/package-util"));
const package_updator_1 = (0, tslib_1.__importDefault)(require("@/package-updator/package-updator"));
class CommandLine {
    constructor() {
        this.commander = new commander_1.Command();
        this.commander
            .description('manage package')
            .requiredOption('-p, --platform <name>', 'update platform name')
            .option('-c, --config-path <config path>', 'input config path')
            .parse();
        this.options = this.commander.opts();
    }
    run() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            yield package_util_1.default.validateEnvironment();
            this.config = yield package_util_1.default.getConfig({
                configPath: this.options.configPath,
            });
            this.updatePackage();
            return true;
        });
    }
    updatePackage() {
        if (!['npm'].includes(this.options.platform)) {
            throw new Error('This command only supports npm.');
        }
        let packageUpdator = new package_updator_1.default(this.config);
        const validate = packageUpdator.update();
        if (validate) {
            console.log(colors_1.default.green(`Already updated`));
            return true;
        }
        console.warn(colors_1.default.red(`update failed`));
        return false;
    }
}
const commandLine = new CommandLine();
commandLine.run();
//# sourceMappingURL=package-update.js.map