"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = (0, tslib_1.__importDefault)(require("fs"));
const composer_util_1 = (0, tslib_1.__importDefault)(require("@/utils/composer-util"));
const npm_util_1 = (0, tslib_1.__importDefault)(require("@/utils/npm-util"));
class PackageUtil {
    static getPackageList(config) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const composerPackageList = yield composer_util_1.default.getPackageList(config);
            const npmPackageList = yield npm_util_1.default.getPackageList(config);
            return composerPackageList.concat(npmPackageList);
        });
    }
    static getConfig(arg) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            let configFile = '';
            if (arg === null || arg === void 0 ? void 0 : arg.configPath) {
                configFile = `${process.cwd()}/${arg.configPath}`;
            }
            else {
                configFile = `${process.cwd()}/package-manager.js`;
            }
            try {
                yield fs_1.default.accessSync(configFile, fs_1.default.constants.F_OK);
            }
            catch (error) {
                throw new Error(`${configFile} not exists`);
            }
            // eslint-disable-next-line import/no-dynamic-require, global-require
            return require(configFile);
        });
    }
    static validateEnvironment() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const versionFull = yield npm_util_1.default.getVersion();
            const versionMain = parseInt(versionFull.split('.')[0], 10);
            if (![7, 8, 9, 10].includes(versionMain)) {
                throw new Error('npm version must be 7 or 8');
            }
            try {
                yield fs_1.default.accessSync(`${process.cwd()}/composer.json`);
            }
            catch (error) {
                throw new Error('composer.json is required');
            }
            try {
                yield fs_1.default.accessSync(`${process.cwd()}/package.json`);
            }
            catch (error) {
                throw new Error('package.json is required');
            }
        });
    }
}
exports.default = PackageUtil;
//# sourceMappingURL=package-util.js.map