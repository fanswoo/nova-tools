import 'jquery-serializejson';
import { Message } from '@fanswoo/message/main';

export default class AjaxSubmit {
  bindEvent() {
    this.onChangeSelectEvent();
    this.onClickSubmitEvent();
  }

  onChangeSelectEvent() {
    $(document).on('change', 'select', (event: Event) => {
      const currentTarget = event.currentTarget!;

      if ($(currentTarget).find('option[ff-href]:selected').attr('ff-href')) {
        window.location.href = $(currentTarget)
          .find('option[ff-href]:selected')
          .attr('ff-href')!;
        $(currentTarget).find('option:selected').prop('selected', false);
      } else if (
        $(currentTarget)
          .find('option[ff-href-with-data]:selected')
          .attr('ff-href-with-data')
      ) {
        let data = this.getFormData($(currentTarget).find('option:selected'));
        let url = $(currentTarget)
          .find('option[ff-href-with-data]:selected')
          .attr('ff-href-with-data')!;

        if (url.indexOf('?') == -1) {
          url = url + '?';
        }

        for (let key in data) {
          url = url + '&' + key + '=' + data[key];
        }

        location.href = url;
        $(currentTarget).find('option:selected').prop('selected', false);
      } else if (
        $(currentTarget).find('option[ff-type=submit]:selected').val()
      ) {
        this.sendForm($(currentTarget).find('option:selected'), event);
        $(currentTarget).find('option:selected').prop('selected', false);
      }
    });
  }

  onClickSubmitEvent() {
    $(document).on('click', ':submit', (event) => {
      this.sendForm(event.currentTarget, event);
    });
  }

  getFormData(ele) {
    let data = (<any>$(ele).parents('form')).serializeJSON({
      parseBooleans: true,
    });

    if ($(ele).attr('ff-name') && $(ele)[0].nodeName == 'OPTION') {
      data[$(ele).attr('ff-name')!] = true;
    } else if ($(ele).attr('name')) {
      data[$(ele).attr('name')!] = true;
    }

    data['ff_ajax_post'] = true;
    return data;
  }

  runSendMessageShow() {
    const message = Message.getInstance();
    message.show({
      // id: 'serviceLoading',
      text: '正在送出資料...',
    });
  }

  sendForm(ele, event) {
    let $this = $(ele);
    var $form = $this.parents('form');

    if ($this.parents('.ck-body, .ck-editor').length > 0) {
      return false;
    }

    if ($this.attr('ff-sendtype') !== 'post') {
      if ($this.attr('ff-action')) {
        (<any>$form).action = $this.attr('ff-action');
      }
      event.preventDefault();
    }

    if (
      ($this.attr('ff-type') !== 'submit' && $this[0].nodeName == 'OPTION') ||
      ($this.attr('type') !== 'submit' && $this[0].nodeName !== 'OPTION') ||
      $this.attr('ff-sendtype') == 'post'
    ) {
      return false;
    }

    if ($this.attr('ff-confirm')) {
      if (!confirm($this.attr('ff-confirm'))) {
        return false;
      }
    }

    this.runSendMessageShow();

    $form
      .find(
        'input[disabled], select[disabled], textarea[disabled], button[disabled]',
      )
      .attr('ff-disabled', 'disabled');

    let data = this.getFormData(ele);

    if ($this.attr('type') == 'submit') {
      data[$this.attr('name')!] = $this.val();
    }

    let url;

    if ($this.attr('ff-action')) {
      url = $this.attr('ff-action');
    } else if ($this[0].nodeName !== 'OPTION') {
      url = $form.attr('action');
    }

    //按鈕變灰色
    $form
      .find(
        'input:not([ff-disabled]), select:not([ff-disabled]), textarea:not([ff-disabled]), button:not([ff-disabled])',
      )
      .attr('disabled', 'disabled');

    this.sendFormAjax(ele, url, data);
  }

  async sendFormAjax(ele, url, data) {
    let $this = $(ele);
    let $form = $this.parents('form');

    let response;

    // const options = {
    // 	method: 'POST',
    // 	headers: { 'content-type': 'application/x-www-form-urlencoded' },
    // 	data: qs.stringify(data),
    // 	url,
    // };

    try {
      response = await axios.post(url, data);
    } catch (error) {
      console.error(error);
      // $('html').html(error.response);
    }

    if (!response) {
      console.error(response);
      // $('html').html(response);
    }

    // if (typeof response.data !== 'object') {
    // 	$('html').html(response.data);
    // }

    this.runDoneMessageShow(response.data);

    // 按鈕變正常顏色
    if (response.data.second >= 2) {
      response.data.second = response.data.second * 1000;
    } else {
      response.data.second = 2000;
    }

    setTimeout(() => {
      $form
        .find(
          'input:not([ff-disabled]), select:not([ff-disabled]), textarea:not([ff-disabled]), button:not([ff-disabled])',
        )
        .removeAttr('disabled');
    }, response.data.second);
  }

  runDoneMessageShow(response) {
    // if( response.fails )
    // {
    //  return false;
    // }
    const message = Message.getInstance();
    message.show(response);
  }
}
