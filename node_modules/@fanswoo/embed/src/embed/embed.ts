export default class Embed {
  parse(el: string): void {
    let oembeds = document.querySelectorAll(
      el + ' oembed[url]',
    ) as NodeListOf<HTMLElement>;
    oembeds.forEach(async (element: HTMLElement) => {
      let url = element.getAttribute('url');
      element.style.width = '100%';

      let response;
      try {
        response = await axios.post('api/embed/oembed', {
          url,
        });
      } catch (error) {
        console.warn(error);
      }

      if (response.data.code) {
        let div = document.createElement('div');
        div.className = 'embed-responsive embed-responsive-16by9';
        div.innerHTML = response.data.code.trim();
        element.appendChild(div);
      } else if (response.data.title && response.data.url) {
        let a = document.createElement('a');
        a.innerText = response.data.title.trim();
        a.setAttribute('href', response.data.url);
        a.setAttribute('target', '_blank');
        element.appendChild(a);
      }
    });
  }

  parseHtmlSourceCode(el: string): void {
    let htmlSourceCode = document.querySelectorAll(
      el + ' html-source-code',
    ) as NodeListOf<HTMLElement>;
    htmlSourceCode.forEach((element: HTMLElement) => {
      let innerText = element.innerText;
      let div: HTMLElement = document.createElement('div');
      div.innerHTML = innerText.trim();
      element.innerText = '';
      element.appendChild(div);

      if (div.getElementsByTagName('iframe').length > 0) {
        div.className = 'embed-responsive embed-responsive-16by9';
      } else {
        this.unwrap(div);
      }
      this.unwrap(element);
    });
  }

  unwrap(ele: HTMLElement): void {
    let parent: any = ele.parentNode;

    while (ele.firstChild) {
      parent.insertBefore(ele.firstChild, ele);
    }

    parent.removeChild(ele);

    // return parent;
  }
}
