export default class Message {
  private static instance: Message = new Message();

  constructor() {
    if (Message.instance) {
      throw new Error(
        'Error: Instantiation failed: Use SingletonClass.getInstance() instead of new.',
      );
    }

    Message.instance = this;
  }

  public static getInstance(): Message {
    return Message.instance;
  }

  text: string = '';

  downloadUrl(url: string) {
    const $a = document.createElement('a')!;
    $a.setAttribute('href', url);
    $a.setAttribute('download', '');
    const evObj = document.createEvent('MouseEvents')!;
    evObj.initMouseEvent(
      'click',
      true,
      true,
      window,
      0,
      0,
      0,
      0,
      0,
      false,
      false,
      true,
      false,
      0,
      null,
    );
    $a.dispatchEvent(evObj);
  }

  async show(
    arg: any,
    argSecond?: number,
    argUrl?: string,
    argScript?: string,
  ) {
    let text: string;
    let downloadUrl: string = '';
    let second = argSecond;
    let url = argUrl;
    let script = argScript;

    if (typeof arg === 'object') {
      text = arg.text;
      second = arg.second;
      script = arg.script;
      downloadUrl = arg.downloadUrl;

      if (arg.url !== undefined) {
        url = arg.url;
      } else {
        url = undefined;
      }
    } else {
      text = arg;
    }

    if (!second || second < 2) {
      second = 2;
    }

    this.text = text;
    const animateTime = second * 1000 - 300;

    if (downloadUrl) {
      this.downloadUrl(downloadUrl);
    }

    if (
      text !== '' &&
      text !== null &&
      text !== undefined &&
      $('[ff-message-show]').length === 0
    ) {
      const $messageShowClone = $('[ff-message-show-clone]').clone();
      $messageShowClone
        .removeAttr('ff-message-show-clone')
        .attr('ff-message-show', 'true')
        .css('display', 'block')
        .prependTo('body');
    }

    $('[ff-message-show] .message-content').html(text);

    await setTimeout(() => {
      const width = $('[ff-message-show]').width()!;
      $('[ff-message-show]').css('margin-left', -width / 2);
    }, 1);

    setTimeout(() => {
      if (text === this.text) {
        $('[ff-message-show]').animate({ opacity: 0 }, 300, 'swing', () => {
          $('[ff-message-show]').remove();
        });
      }
    }, animateTime);

    $(document).on('click', '[ff-message-show]', () => {
      $('[ff-message-show]').animate({ opacity: 0 }, 300, 'swing', () => {
        $('[ff-message-show]').remove();
      });
    });

    if (url !== undefined && url !== null && url === '') {
      setTimeout(() => {
        const base = $('base').attr('href')!;
        window.location.href = base;
      }, second * 1000 - 300);
    } else if (url) {
      setTimeout(() => {
        const base = $('base').attr('href')!;
        window.location.href = base + url;
      }, second * 1000 - 300);
    }
  }
}
