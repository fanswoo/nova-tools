import {
  ComponentRegulation,
  ComponentData,
} from '@fanswoo/component-loader/component-loader/constracts/component-regulation';

class ComponentLoader {
  private config = null;
  
  private static instance: ComponentLoader = null;
  
  public static getInstance(): ComponentLoader {
    if (ComponentLoader.instance) {
      return ComponentLoader.instance;
    }
    ComponentLoader.instance = new ComponentLoader();
    
    return ComponentLoader.instance;
  }
  
  constructor() {
    if (ComponentLoader.instance) {
      throw new Error(
        'Error: Instantiation failed: Use SingletonClass.getInstance() instead of new.',
      );
    }
  }
  
  public setConfig(config) {
    this.config = config;
  }

  public loadComponents(componentRegulations: ComponentRegulation[] = []): ComponentData[] {

    if(!this.config) {
      throw new Error(
        'You must use setConfig() method before loadComponents().',
      );
    }
    
    const { importModules, componentPages } = this.config;
    const modules = importModules();
    let importComponents = [];

    componentRegulations.forEach(
      (componentRegulation: ComponentRegulation) => {
        const someComponents = this.importCustomComponentByPath(
          componentRegulation,
          componentPages,
          modules,
        );

        importComponents = Object.assign(importComponents, someComponents);
      },
    );

    return importComponents;
  }

  private importCustomComponentByPath(
    componentRegulation: ComponentRegulation,
    componentPages,
    modules: any[],
  ) {
    const { pageName, themeName, typeName } = componentRegulation;
    let components: ComponentData[] = [];

    const globalComponents: ComponentData[] = componentPages
      .find((item) => item.global)
      ?.componentThemes.find((item) => item.name === themeName)
      ?.componentTypes.find((item) => item.name === typeName)
      ?.components as ComponentData[];

    const pageComponents: ComponentData[] = componentPages
      .find((item) => !item.global && pageName && item.name === pageName)
      ?.componentThemes.find((item) => item.name === themeName)
      ?.componentTypes.find((item) => item.name === typeName)
      ?.components as ComponentData[];

    if (globalComponents) {
      components = globalComponents;
    }

    if (pageComponents) {
      components = components.concat(pageComponents);
    }

    if (!components) {
      throw new Error("ComponentLoader can't loads components");
    }

    const importComponents = [];
    Object.keys(modules).forEach((path) => {
      for (let i = 0; i < components.length; i += 1) {
        let componentPath = components[i].path;

        if (componentPath && path === componentPath) {
          const componentType = components[i].name;

          importComponents[componentType] = modules[path].default;
          
        }
      }
    });

    return importComponents;
  }

}

export default ComponentLoader;