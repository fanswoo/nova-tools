import Specification from '@fanswoo/control-center/pages/admin/custom-component/edit-control-center/line-content/shop/product/product/classes/specification';
import SpecificationName from '@fanswoo/control-center/pages/admin/custom-component/edit-control-center/line-content/shop/product/product/classes/specification-name';
import SpecificationColor from '@fanswoo/control-center/pages/admin/custom-component/edit-control-center/line-content/shop/product/product/classes/specification-color';
import { getNoEmptySpecificationNames } from '@fanswoo/control-center/pages/admin/custom-component/edit-control-center/line-content/shop/product/product/helpers/specification-name-handler';
import { getNoEmptySpecificationColors } from '@fanswoo/control-center/pages/admin/custom-component/edit-control-center/line-content/shop/product/product/helpers/specification-color-handler';
import { assign } from '@fanswoo/core/utils/util';

const createSpecifications = ({
  specificationNames,
  specificationColors,
  originSpecifications,
}) => {
  const specifications: Array<Specification> = [];

  const noEmptySpecificationNames =
    getNoEmptySpecificationNames(specificationNames);

  const noEmptySpecificationColors =
    getNoEmptySpecificationColors(specificationColors);

  const nameList: Array<SpecificationName> =
    noEmptySpecificationNames.length === 0
      ? [new SpecificationName()]
      : noEmptySpecificationNames;

  const colorList: Array<SpecificationColor> =
    noEmptySpecificationColors.length === 0
      ? [new SpecificationColor()]
      : noEmptySpecificationColors;

  nameList.forEach((specificationName) => {
    colorList.forEach((specificationColor) => {
      const specification = originSpecifications.find((originSpecification) => {
        const isExist =
          originSpecification.nameId === specificationName.nameId &&
          originSpecification.colorId === specificationColor.colorId;

        return isExist;
      });

      const newSpecification = new Specification();

      if (specification !== undefined) {
        assign(newSpecification, specification);
      } else {
        newSpecification.nameId = specificationName.nameId;
        newSpecification.colorId = specificationColor.colorId;
      }

      newSpecification.name = specificationName.name;
      newSpecification.colorName = specificationColor.colorName;
      newSpecification.colorRgb = specificationColor.colorRgb;
      specifications.push(newSpecification);
    });
  });

  return specifications;
};

const createOriginSpecifications = ({
  specificationNames,
  specificationColors,
  specifications,
}) => {
  const specificationList: Array<Specification> = specifications.map(
    (specification) => {
      const matchName = specificationNames.find((specificationName) => {
        const result = specificationName.name === specification.name;
        return result;
      });

      const matchColor = specificationColors.find((specificationColor) => {
        const result = specificationColor.colorName === specification.colorName;
        return result;
      });

      const tempSpecification = new Specification();
      tempSpecification.nameId = matchName?.nameId ?? '';
      tempSpecification.colorId = matchColor?.colorId ?? '';
      assign(tempSpecification, specification);
      return tempSpecification;
    },
  );

  return specificationList;
};

export { createSpecifications, createOriginSpecifications };
