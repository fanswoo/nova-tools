import { createStore } from 'vuex';

const store = createStore({
  state: {
    ConditionType: {
      DISCOUNT: '',
      UNCONDITIONAL: 'unconditional',
      ORDER: 'order',
      SPECIFIC_ITEM: 'specific_item',
      SPECIFIC_CLASS: 'specific_class',
      FISRT_PURCHASE: 'first_purchase',
    },
    ConditionTypeDetail: {
      MONEY: 'money',
      COUNT: 'count',
    },
    GiveType: {
      DISCOUNT: 'discount',
      MONEY: 'money',
      COUPON: 'coupon',
      GIFT: 'gift',
      SHIPPING: 'shipping',
    },
    GiveFor: {
      ALL: 'all',
      SPECIFIC_ITEM: 'specific_item',
      SPECIFIC_CLASS: 'specific_class',
    },
    ForUser: {
      ALL: 'all',
      SPECIFIC_USER_GROUP: 'specific_user_group',
    },
    conditionType: '',
    conditionTypeDetail: '',
    giveType: '',
    giveFor: '',
    maxPairAmount: 5,

    forUser: '',
  },
  getters: {
    // 優惠條件及內容
    conditionTypeOptions: state => {
      return [
        {
          id: 1,
          value: state.ConditionType.UNCONDITIONAL,
          text: '無條件',
        },
        {
          id: 2,
          value: state.ConditionType.FISRT_PURCHASE,
          text: '會員首次購物',
        },
        {
          id: 3,
          value: state.ConditionType.ORDER,
          text: '全單達到',
        },
        {
          id: 4,
          value: state.ConditionType.SPECIFIC_ITEM,
          text: '指定產品達到',
        },
        {
          id: 5,
          value: state.ConditionType.SPECIFIC_CLASS,
          text: '指定分類達到',
        },
      ];
    },
    conditionTypeDetailOptions: state => {
      return [
        {
          id: 1,
          value: state.ConditionTypeDetail.MONEY,
          text: '滿額',
        },
        {
          id: 2,
          value: state.ConditionTypeDetail.COUNT,
          text: '滿件',
        },
      ];
    },
    giveTypeOptions: state => {
      return [
        {
          id: 1,
          value: state.GiveType.DISCOUNT,
          text: '折扣 %',
        },
        {
          id: 2,
          value: state.GiveType.MONEY,
          text: '折扣金額',
        },
        {
          id: 3,
          value: state.GiveType.COUPON,
          text: '贈送點數',
        },
        {
          id: 4,
          value: state.GiveType.GIFT,
          text: '贈品',
        },
        {
          id: 5,
          value: state.GiveType.SHIPPING,
          text: '運費優惠',
        },
      ];
    },
    giveForOptions: state => {
      if (state.conditionType === state.ConditionType.SPECIFIC_ITEM) {
        return [
          {
            id: 2,
            value: state.GiveFor.SPECIFIC_ITEM,
            text: '指定產品',
          },
        ];
      }

      if (
        state.conditionType === state.ConditionType.SPECIFIC_CLASS
      ) {
        return [
          {
            id: 3,
            value: state.GiveFor.SPECIFIC_CLASS,
            text: '指定產品分類',
          },
        ];
      }

      return [
        {
          id: 1,
          value: state.GiveFor.ALL,
          text: '全產品',
        },
        {
          id: 2,
          value: state.GiveFor.SPECIFIC_ITEM,
          text: '指定產品',
        },
        {
          id: 3,
          value: state.GiveFor.SPECIFIC_CLASS,
          text: '指定產品分類',
        },
      ];
    },

    isDiscountGiveType: state => {
      return (
        state.giveType == state.GiveType.DISCOUNT ||
        state.giveType == state.GiveType.MONEY
      );
    },
    isGiftGiveType: state => {
      return state.giveType == state.GiveType.GIFT;
    },
    isShippingGiveType: state => {
      return state.giveType == state.GiveType.SHIPPING;
    },
    isGiveForSpecificItem: state => {
      return state.giveFor == state.GiveFor.SPECIFIC_ITEM;
    },
    isGiveForSpecificClass: state => {
      return state.giveFor == state.GiveFor.SPECIFIC_CLASS;
    },
    isConditionTypeSpecificItem: state => {
      return state.conditionType == state.ConditionType.SPECIFIC_ITEM;
    },
    isConditionTypeSpecificClass: state => {
      return (
        state.conditionType == state.ConditionType.SPECIFIC_CLASS
      );
    },
    hasConditionRule: state => {
      return (
        state.conditionType != state.ConditionType.UNCONDITIONAL &&
        state.conditionType != state.ConditionType.FISRT_PURCHASE
      );
    },

    conditionTypeDetailText: state => {
      switch (state.conditionTypeDetail) {
        case state.ConditionTypeDetail.COUNT:
          return '件';
          break;
        case state.ConditionTypeDetail.MONEY:
          return '元';
          break;
      }
    },
    giveTypeTitle: (
      state,
      { isDiscountGiveType, isShippingGiveType },
    ) => {
      if (isDiscountGiveType) return '折扣';
      else if (isShippingGiveType) return '運費';
      else return '贈送';
    },
    giveTypeText: state => {
      switch (state.giveType) {
        case state.GiveType.DISCOUNT:
          return '％';
          break;
        case state.GiveType.MONEY:
        case state.GiveType.SHIPPING:
          return '元';
          break;
        case state.GiveType.COUPON:
          return '點';
          break;
        case state.GiveType.GIFT:
          return '件';
          break;
      }
    },
    preferentialText: state => {
      switch (state.conditionType) {
        case state.ConditionType.DISCOUNT:
          return '';
          break;
        case state.ConditionType.FISRT_PURCHASE:
          return '[會員首次購物]';
          break;
        case state.ConditionType.ORDER:
          return '[全單] 購買';
          break;
        case state.ConditionType.SPECIFIC_ITEM:
          return '購買 [指定產品]';
          break;
        case state.ConditionType.SPECIFIC_CLASS:
          return '購買 [指定分類] 的產品';
          break;
      }

      // state.conditionTypeDetail
      // state.giveType
      // state.giveFor
      // return state.forUser == state.ForUser.SPECIFIC_USER_GROUP;
    },

    //適用會員
    isForSpecificUserGroup: state => {
      return state.forUser == state.ForUser.SPECIFIC_USER_GROUP;
    },
  },
  mutations: {
    setConditionType(state, payload) {
      state.conditionType = payload;
    },
    setConditionTypeDetail(state, payload) {
      state.conditionTypeDetail = payload;
    },
    setGiveType(state, payload) {
      state.giveType = payload;
    },
    setGiveFor(state, payload) {
      state.giveFor = payload;
    },
    setForUser(state, payload) {
      state.forUser = payload;
    },
  },
});

export default store;
