import {
  removeEmptySpecificationNames,
  filterDuplicatedSpecificationNames,
  assignSpecificationNames,
  appendSpecificationNamesIfLastIsNotEmpty,
  resetSpecificationNames,
  getNoEmptySpecificationNames,
} from '@fanswoo/control-center/pages/admin/custom-component/edit-control-center/line-content/shop/product/product/helpers/specification-name-handler';
import SpecificationName from '../classes/specification-name';

test('removeEmptySpecificationNames', () => {
  let specificationNames: Array<SpecificationName> = [];

  const names = ['S', '', 'M', 'L'];

  names.forEach(name => {
    const specificationName = new SpecificationName();
    specificationName.name = name;
    specificationNames.push(specificationName);
  });

  specificationNames = removeEmptySpecificationNames(specificationNames);

  expect(specificationNames.length).toBe(3);
});

test('filterDuplicatedSpecificationNames', () => {
  let specificationNames: Array<SpecificationName> = [];

  const names = ['S', 'S', 'M', 'L'];

  names.forEach(name => {
    const specificationName = new SpecificationName();
    specificationName.name = name;
    specificationNames.push(specificationName);
  });

  specificationNames = filterDuplicatedSpecificationNames(specificationNames);

  expect(specificationNames.length).toBe(3);
});

test('assignSpecificationNames', () => {
  let specificationNames: Array<SpecificationName> = [];

  const emptyNameList = [];

  specificationNames = assignSpecificationNames(emptyNameList);

  expect(specificationNames.length).toBe(1);

  specificationNames = [];

  const names = ['S', 'M', 'L'];

  names.forEach(name => {
    const specificationName = new SpecificationName();
    specificationName.name = name;
    specificationNames.push(specificationName);
  });

  specificationNames = assignSpecificationNames(specificationNames);

  expect(specificationNames.length).toBe(3);
});

test('appendSpecificationNamesIfLastIsNotEmpty', () => {
  let specificationNames: Array<SpecificationName> = [];

  const namesWithEmptyTail = ['S', 'M', ''];

  namesWithEmptyTail.forEach(name => {
    const specificationName = new SpecificationName();
    specificationName.name = name;
    specificationNames.push(specificationName);
  });

  specificationNames = appendSpecificationNamesIfLastIsNotEmpty(
    specificationNames,
  );

  expect(specificationNames.length).toBe(3);

  specificationNames = [];

  const names = ['S', 'M', 'L'];

  names.forEach(name => {
    const specificationName = new SpecificationName();
    specificationName.name = name;
    specificationNames.push(specificationName);
  });

  specificationNames = appendSpecificationNamesIfLastIsNotEmpty(
    specificationNames,
  );

  expect(specificationNames.length).toBe(4);
});

test('resetSpecificationNames', () => {
  let specificationNames: Array<SpecificationName> = [];

  const names = ['S', '', 'M', 'M', 'L'];

  names.forEach(name => {
    const specificationName = new SpecificationName();
    specificationName.name = name;
    specificationNames.push(specificationName);
  });

  // ends up ['S', 'M', 'L', '']
  specificationNames = resetSpecificationNames(specificationNames);

  expect(specificationNames.length).toBe(4);
});

test('getNoEmptySpecificationNames', () => {
  let specificationNames: Array<SpecificationName> = [];

  const names = ['S', '', 'M', '', 'L'];

  names.forEach(name => {
    const specificationName = new SpecificationName();
    specificationName.name = name;
    specificationNames.push(specificationName);
  });

  // ends up ['S', 'M', 'L']
  specificationNames = getNoEmptySpecificationNames(specificationNames);

  expect(specificationNames.length).toBe(3);
});
