import SpecificationColor from '@fanswoo/control-center/pages/admin/custom-component/edit-control-center/line-content/shop/product/product/classes/specification-color';
import { assign, isEmpty } from '@fanswoo/core/utils/util';

// 去除空的型別
const removeEmptySpecificationColors = (
  specificationColors: Array<SpecificationColor>,
): Array<SpecificationColor> => {
  const colorList: Array<SpecificationColor> = [];

  specificationColors.forEach((specificationColor) => {
    if (specificationColor.colorName) {
      colorList.push(specificationColor);
    }
  });

  return colorList;
};

// 去重複的型別
const filterDuplicatedSpecificationColors = (
  specificationColors: Array<SpecificationColor>,
): Array<SpecificationColor> => {
  const colorList = specificationColors.filter(
    (specificationColor, index, self) => {
      const inArray =
        index ===
        self.findIndex((t) => t.colorName === specificationColor.colorName);

      return inArray;
    },
  );

  return colorList;
};

// 型別赴值
const assignSpecificationColors = (
  specificationColors: Array<SpecificationColor>,
): Array<SpecificationColor> => {
  const colorList: Array<SpecificationColor> = [];

  if (specificationColors.length === 0) {
    const specificationColor = new SpecificationColor();
    colorList.push(specificationColor);
    return colorList;
  }

  specificationColors.forEach((specificationColor) => {
    const tempSpecificationColor = new SpecificationColor();
    assign(tempSpecificationColor, specificationColor);
    colorList.push(tempSpecificationColor);
  });

  return colorList;
};

// 如果最後一個型別是空的 就往下添加一個空的值以便輸入
const appendSpecificationColorsIfLastIsNotEmpty = (
  specificationColors: Array<SpecificationColor>,
): Array<SpecificationColor> => {
  const lastSpecificationColor: SpecificationColor =
    specificationColors[specificationColors.length - 1];

  if (!isEmpty(lastSpecificationColor?.colorName ?? '')) {
    const specificationColor = new SpecificationColor();
    specificationColors.push(specificationColor);
  }

  return specificationColors;
};

const resetSpecificationColors = (
  specificationColors: Array<SpecificationColor>,
) => {
  let colorList: Array<SpecificationColor> =
    removeEmptySpecificationColors(specificationColors);
  colorList = filterDuplicatedSpecificationColors(colorList);
  colorList = assignSpecificationColors(colorList);
  return appendSpecificationColorsIfLastIsNotEmpty(colorList);
};

const getNoEmptySpecificationColors = (
  specificationColors: Array<SpecificationColor>,
): Array<SpecificationColor> => {
  const colorList: Array<SpecificationColor> = specificationColors.filter(
    (specificationColor: SpecificationColor) => {
      const { colorName } = specificationColor;
      return !isEmpty(colorName);
    },
  );

  return colorList;
};

export {
  removeEmptySpecificationColors,
  filterDuplicatedSpecificationColors,
  assignSpecificationColors,
  appendSpecificationColorsIfLastIsNotEmpty,
  resetSpecificationColors,
  getNoEmptySpecificationColors,
};
