import {
  createSpecifications,
  createOriginSpecifications,
} from '@fanswoo/control-center/pages/admin/custom-component/edit-control-center/line-content/shop/product/product/helpers/specification-handler';

import { resetSpecificationColors } from '@fanswoo/control-center/pages/admin/custom-component/edit-control-center/line-content/shop/product/product/helpers/specification-color-handler';

import { resetSpecificationNames } from '@fanswoo/control-center/pages/admin/custom-component/edit-control-center/line-content/shop/product/product/helpers/specification-name-handler';

import Specification from '../classes/specification';
import SpecificationColor from '../classes/specification-color';
import SpecificationName from '../classes/specification-name';

test('createSpecifications', () => {
  let specificationNames: Array<SpecificationName> = [];

  const names = ['S', '', 'M', 'M', 'L'];

  names.forEach(name => {
    const specificationName = new SpecificationName();
    specificationName.name = name;
    specificationNames.push(specificationName);
  });

  // ends up ['S', 'M', 'L', '']
  specificationNames = resetSpecificationNames(specificationNames);

  let specificationColors: Array<SpecificationColor> = [];

  const colors = ['', '黑', '黑', '紅', '白'];

  colors.forEach(color => {
    const specificationColor = new SpecificationColor();
    specificationColor.colorName = color;
    specificationColors.push(specificationColor);
  });

  // ends up ['白', '黑', '紅', '']
  specificationColors = resetSpecificationColors(specificationColors);

  const originSpecifications = [
    {
      name: 'S',
      colorName: '黑',
    },
    {
      name: 'S',
      colorName: '紅',
    },
    {
      name: 'M',
      colorName: '黑',
    },
    {
      name: 'M',
      colorName: '紅',
    },
  ];

  const convertedSpecifications = createSpecifications({
    specificationNames,
    specificationColors,
    originSpecifications,
  });

  expect(convertedSpecifications.length).toBe(9);
  expect(convertedSpecifications[0]).toBeInstanceOf(Specification);

  convertedSpecifications.forEach(specification => {
    const name = specificationNames.find(specificationName => {
      const result = specificationName.name === specification.name;
      return result;
    });

    const color = specificationColors.find(specificationColor => {
      const result = specificationColor.colorName === specification.colorName;
      return result;
    });

    expect(specification.nameId).toBe(name?.nameId ?? '');
    expect(specification.colorId).toBe(color?.colorId ?? '');
  });
});

test('createOriginSpecifications', () => {
  let specificationNames: Array<SpecificationName> = [];

  const names = ['S', '', 'M', 'M'];

  names.forEach(name => {
    const specificationName = new SpecificationName();
    specificationName.name = name;
    specificationNames.push(specificationName);
  });

  // ends up ['S', 'M', 'L', '']
  specificationNames = resetSpecificationNames(specificationNames);

  let specificationColors: Array<SpecificationColor> = [];

  const colors = ['', '黑', '黑', '紅'];

  colors.forEach(color => {
    const specificationColor = new SpecificationColor();
    specificationColor.colorName = color;
    specificationColors.push(specificationColor);
  });

  // ends up ['白', '黑', '紅', '']
  specificationColors = resetSpecificationColors(specificationColors);

  const specifications = [
    {
      name: 'S',
      colorName: '黑',
    },
    {
      name: 'S',
      colorName: '紅',
    },
    {
      name: 'M',
      colorName: '黑',
    },
    {
      name: 'M',
      colorName: '紅',
    },
  ];

  const convertedSpecifications = createOriginSpecifications({
    specificationNames,
    specificationColors,
    specifications,
  });

  expect(convertedSpecifications.length).toBe(4);
  expect(convertedSpecifications[0]).toBeInstanceOf(Specification);

  convertedSpecifications.forEach(specification => {
    const name = specificationNames.find(specificationName => {
      const result = specificationName.name === specification.name;
      return result;
    });

    const color = specificationColors.find(specificationColor => {
      const result = specificationColor.colorName === specification.colorName;
      return result;
    });

    expect(specification.nameId).toBe(name?.nameId);
    expect(specification.colorId).toBe(color?.colorId);
  });
});
