import {
  removeEmptySpecificationColors,
  filterDuplicatedSpecificationColors,
  assignSpecificationColors,
  appendSpecificationColorsIfLastIsNotEmpty,
  resetSpecificationColors,
  getNoEmptySpecificationColors,
} from '@fanswoo/control-center/pages/admin/custom-component/edit-control-center/line-content/shop/product/product/helpers/specification-color-handler';
import SpecificationColor from '../classes/specification-color';

test('removeEmptySpecificationColors', () => {
  let specificationColors: Array<SpecificationColor> = [];

  const colors = ['白', '', '黑', '紅'];

  colors.forEach(color => {
    const specificationColor = new SpecificationColor();
    specificationColor.colorName = color;
    specificationColors.push(specificationColor);
  });

  specificationColors = removeEmptySpecificationColors(specificationColors);

  expect(specificationColors.length).toBe(3);
});

test('filterDuplicatedSpecificationColors', () => {
  let specificationColors: Array<SpecificationColor> = [];

  const colors = ['白', '白', '黑', '紅'];

  colors.forEach(color => {
    const specificationColor = new SpecificationColor();
    specificationColor.colorName = color;
    specificationColors.push(specificationColor);
  });

  specificationColors = filterDuplicatedSpecificationColors(
    specificationColors,
  );

  expect(specificationColors.length).toBe(3);
});

test('assignSpecificationColors', () => {
  let specificationColors: Array<SpecificationColor> = [];

  const emptyColorList = [];

  specificationColors = assignSpecificationColors(emptyColorList);

  expect(specificationColors.length).toBe(1);

  specificationColors = [];

  const colors = ['白', '黑', '紅'];

  colors.forEach(color => {
    const specificationColor = new SpecificationColor();
    specificationColor.colorName = color;
    specificationColors.push(specificationColor);
  });

  specificationColors = assignSpecificationColors(specificationColors);

  expect(specificationColors.length).toBe(3);
});

test('appendSpecificationColorsIfLastIsNotEmpty', () => {
  let specificationColors: Array<SpecificationColor> = [];

  const colorsWithEmptyTail = ['白', '黑', ''];

  colorsWithEmptyTail.forEach(color => {
    const specificationColor = new SpecificationColor();
    specificationColor.colorName = color;
    specificationColors.push(specificationColor);
  });

  specificationColors = appendSpecificationColorsIfLastIsNotEmpty(
    specificationColors,
  );

  expect(specificationColors.length).toBe(3);

  specificationColors = [];

  const colors = ['白', '黑', '紅'];

  colors.forEach(color => {
    const specificationColor = new SpecificationColor();
    specificationColor.colorName = color;
    specificationColors.push(specificationColor);
  });

  specificationColors = appendSpecificationColorsIfLastIsNotEmpty(
    specificationColors,
  );

  expect(specificationColors.length).toBe(4);
});

test('resetSpecificationColors', () => {
  let specificationColors: Array<SpecificationColor> = [];

  const colors = ['白', '', '黑', '黑', '紅'];

  colors.forEach(color => {
    const specificationColor = new SpecificationColor();
    specificationColor.colorName = color;
    specificationColors.push(specificationColor);
  });

  // ends up ['白', '黑', '紅', '']
  specificationColors = resetSpecificationColors(specificationColors);

  expect(specificationColors.length).toBe(4);
});

test('getNoEmptySpecificationColors', () => {
  let specificationColors: Array<SpecificationColor> = [];

  const colors = ['白', '', '黑', '', '紅'];

  colors.forEach(color => {
    const specificationColor = new SpecificationColor();
    specificationColor.colorName = color;
    specificationColors.push(specificationColor);
  });

  // ends up ['白', '黑', '紅']
  specificationColors = getNoEmptySpecificationColors(specificationColors);

  expect(specificationColors.length).toBe(3);
});
