import SpecificationName from '@fanswoo/control-center/pages/admin/custom-component/edit-control-center/line-content/shop/product/product/classes/specification-name';
import { assign, isEmpty } from '@fanswoo/core/utils/util';

// 移除 specificationNames 中空白的項目
const removeEmptySpecificationNames = (
  specificationNames: Array<SpecificationName>,
): Array<SpecificationName> => {
  const nameList: Array<SpecificationName> = [];

  specificationNames.forEach((specificationName) => {
    if (specificationName.name) {
      nameList.push(specificationName);
    }
  });

  return nameList;
};

const filterDuplicatedSpecificationNames = (
  specificationNames: Array<SpecificationName>,
): Array<SpecificationName> => {
  const nameList = specificationNames.filter(
    (specificationName, index, self) => {
      const inArray =
        index === self.findIndex((t) => t.name === specificationName.name);

      return inArray;
    },
  );

  return nameList;
};

const assignSpecificationNames = (
  specificationNames: Array<SpecificationName>,
): Array<SpecificationName> => {
  const nameList: Array<SpecificationName> = [];

  if (specificationNames.length === 0) {
    const specificationName = new SpecificationName();
    nameList.push(specificationName);
    return nameList;
  }

  specificationNames.forEach((specificationName) => {
    const tempSpecificationName = new SpecificationName();
    assign(tempSpecificationName, specificationName);
    nameList.push(tempSpecificationName);
  });

  return nameList;
};

// 如果 specificationNames 中的最後一項是空的 就添加一個空的 SpecificationName
const appendSpecificationNamesIfLastIsNotEmpty = (
  specificationNames: Array<SpecificationName>,
): Array<SpecificationName> => {
  const lastSpecificationName: SpecificationName =
    specificationNames[specificationNames.length - 1];

  if (!isEmpty(lastSpecificationName?.name ?? '')) {
    const specificationName = new SpecificationName();
    specificationNames.push(specificationName);
  }

  return specificationNames;
};

// 同時執行 removeEmptySpecificationNames, appendSpecificationNamesIfLastIsNotEmpty
const resetSpecificationNames = (
  specificationNames: Array<SpecificationName>,
) => {
  let nameList: Array<SpecificationName> =
    removeEmptySpecificationNames(specificationNames);
  nameList = filterDuplicatedSpecificationNames(nameList);
  nameList = assignSpecificationNames(nameList);
  return appendSpecificationNamesIfLastIsNotEmpty(nameList);
};

const getNoEmptySpecificationNames = (
  specificationNames: Array<SpecificationName>,
): Array<SpecificationName> => {
  const nameList: Array<SpecificationName> = specificationNames.filter(
    (specificationName: SpecificationName) => {
      const { name } = specificationName;
      return !isEmpty(name);
    },
  );

  return nameList;
};

export {
  removeEmptySpecificationNames,
  filterDuplicatedSpecificationNames,
  assignSpecificationNames,
  appendSpecificationNamesIfLastIsNotEmpty,
  resetSpecificationNames,
  getNoEmptySpecificationNames,
};
