import ff from '@fanswoo/core/utils/helper';

interface ORM {
  id: number | string;
  beforeValue: {};
}

export default class ORMCollection {
  setJsonPath: string = '';

  getJsonPath: string = '';

  ORMs: ORM[] = [];

  response?: {};

  onlyTrashed: boolean = false;

  searching: boolean = false;

  canSearchMore: string = '';

  totalCount: number = 0;

  constructor(arg) {
    this.setJsonPath = arg.setJsonPath;
    this.getJsonPath = arg.getJsonPath;
  }

  getORMs(): ORM[] {
    return this.ORMs;
  }

  getResponse() {
    return this.response;
  }

  getORMKey(id) {
    for (let i = 0; i < this.ORMs.length; i += 1) {
      if (id === this.ORMs[i].id) {
        return id;
      }
    }
    return false;
  }

  async result(arg) {
    const { select } = arg;
    this.ORMs = [];

    let response;
    try {
      response = await axios.post(this.getJsonPath, select);
    } catch (error) {
      console.warn(error);
    }

    this.response = response;

    if (!ff.isJson(response.data)) {
      return false;
    }

    this.onlyTrashed = response.data.onlyTrashed;

    if (response.data.ORMs && response.data.ORMs.length > 0) {
      this.ORMs = response.data.ORMs;

      for (let i = 0; i < response.data.ORMs.length; i += 1) {
        response.data.ORMs[i].beforeValue = [];
        for (let i2 = 0; i2 < response.data.ORMs[i]; i += 1) {
          response.data.ORMs[i].beforeValue[i2] = response.data.ORMs[i][i2];
        }
      }

      this.searching = false;

      if (response.data.ORMs.length < response.data.count) {
        this.canSearchMore = 'no';
      } else {
        this.canSearchMore = 'yes';
      }
    } else {
      this.searching = false;
      this.canSearchMore = 'no';
    }

    this.totalCount = response.data.total;

    return true;
  }

  async sync(arg) {
    const { select, key } = arg;
    select.count = 1;
    select.id = arg.id;

    let response;
    try {
      response = await axios.post(this.getJsonPath, select);
    } catch (error) {
      console.error(error);
    }

    this.response = response;

    this.searching = false;

    if (!ff.isJson(response.data)) {
      return false;
    }

    if (response.data.ORMs[0] && response.data.ORMs[0].id) {
      this.ORMs.splice(key, 1, response.data.ORMs[0]);
    } else {
      this.ORMs.splice(key, 1);
    }

    this.ORMs = [...this.ORMs];

    return true;
  }

  async push(arg) {
    let response;
    try {
      response = await axios.post(this.getJsonPath, arg.select);
    } catch (error) {
      console.error(error);
    }

    this.response = response;

    this.searching = false;

    if (!ff.isJson(response.data)) {
      return false;
    }

    if (response.data.ORMs && response.data.ORMs.length > 0) {
      for (let i = 0; i < response.data.ORMs.length; i += 1) {
        response.data.ORMs[i].beforeValue = [];
        for (let i2 = 0; i2 < response.data.ORMs[i]; i2 += 1) {
          response.data.ORMs[i].beforeValue[i2] = response.data.ORMs[i][i2];
        }
      }

      for (let i = 0; i < response.data.ORMs.length; i += 1) {
        this.ORMs.push(response.data.ORMs[i]);
      }
    } else {
      this.canSearchMore = 'no';
    }
    return true;
  }

  async prepend(arg) {
    const { select } = arg;
    select.id = arg.id;

    let response;
    try {
      response = await axios.post(this.getJsonPath, select);
    } catch (error) {
      console.error(error);
    }

    this.response = response;

    if (!ff.isJson(response.data)) {
      return false;
    }

    if (response.data.ORMs && response.data.ORMs.length > 0) {
      for (let i = 0; i < response.data.ORMs.length; i += 1) {
        response.data.ORMs[i].beforeValue = [];
        for (let i2 = 0; i2 < response.data.ORMs[i].length; i2 += 1) {
          response.data.ORMs[i].beforeValue[i2] = response.data.ORMs[i][i2];
        }
      }

      for (let i = 0; i < response.data.ORMs.length; i += 1) {
        this.ORMs.unshift(response.data.ORMs[i]);
      }
    } else {
      this.canSearchMore = 'no';
    }
    return true;
  }

  async update(arg) {
    let response;
    try {
      response = await axios.post(this.setJsonPath, arg.select);
    } catch (error) {
      console.error(error);
    }

    this.response = response;

    if (!ff.isJson(response.data)) {
      return false;
    }

    if (response.data && !response.data.fails) {
      for (let i = 0; i < this.ORMs.length; i += 1) {
        if (arg.select.id === this.ORMs[i].id) {
          this.ORMs[i].beforeValue = [];
          this.ORMs[i].beforeValue[arg.ORM] = this.ORMs[i];
          return true;
        }
      }
    } else {
      for (let i = 0; i < this.ORMs.length; i += 1) {
        if (arg.select.id === this.ORMs[i].id) {
          this.ORMs[i][arg.ORM] = this.ORMs[i].beforeValue[arg.ORM];
          return false;
        }
      }
    }
    return true;
  }

  clear() {
    this.ORMs = [];
  }
}
