interface History {
  fullPath: string;
  pageData: string;
  scrollTop: number;
}

const RoutePageModule = {
  namespaced: true,
  
  state: {
    sidebarOpened: false,
    lastPagePathHistory: [],
    syncORMs: {
      ids: [],
      path: '',
    },
    syncORM: {
      id: 0,
      path: '',
    },
    customComponentConfig: {},
    onResetPageData: false,
    stopRouteLeave: false,
    notificationPopoverOpened: false,
    notificationTotalCount: 0,
    cacheComponents: ['RoutePageSwitch'],
  },
  
  mutations: {
    setSyncORMs(state, value) {
      state.syncORMs = value;
    },
    setSyncORM(state, value) {
      state.syncORM = value;
    },
    setSidebarOpened(state, value) {
      state.sidebarOpened = value;
    },
    setNotificationPopoverOpened(state, value) {
      state.notificationPopoverOpened = value;
    },
    setNotificationTotalCount(state, value) {
      state.notificationTotalCount = value;
    },
    setCustomComponentConfig(state, value) {
      state.customComponentConfig = value;
    },
    pushLastPagePathHistory(state, payload) {
      const history = {
        fullPath: payload.fullPath,
        pageData: payload.pageData,
        scrollTop: 0,
      };
      state.lastPagePathHistory.push(history);
    },
    resetPageData(state) {
      state.onResetPageData = true;
    },
    setPageData(state, value) {
      state.onResetPageData = value;
    },
    setStopRouteLeave(state, value) {
      state.stopRouteLeave = value;
    },
    resetCacheComponents(state) {
      state.cacheComponents = ['RoutePageSwitch'];
    },
    clearCacheComponents(state) {
      state.cacheComponents = [];
    },
  },
  
  actions: {
    // Here you can add actions if you have any asynchronous operations or complex mutations
  },
  
  getters: {
    // Define any getters if necessary
  },
};

export default RoutePageModule;